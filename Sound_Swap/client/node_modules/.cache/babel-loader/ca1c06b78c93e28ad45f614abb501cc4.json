{"ast":null,"code":"var _jsxFileName = \"/Users/jakefilut/Development/Final Projects/Sound_Swap/Sound_Swap/client/src/pages/Playlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Error, Input, FormField, Label, Textarea } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlist() {\n  _s();\n\n  const [songs, setSongs] = useState([]);\n  const [updateSong, setUpdateSong] = useState(false);\n  useEffect(() => {\n    fetch(\"/songs\").then(res => res.json()).then(songData => setSongs(songData));\n    console.log(\"updated song\");\n  }, [updateSong]);\n\n  function handleDelete(song) {\n    fetch(`/songs/${song.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"delete song\");\n    setUpdateSong(!updateSong);\n  }\n\n  const mapSongs = songs.map(song => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song_container_card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"song_title\",\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: song.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(song),\n        children: \"Remove From Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song_container\",\n    children: [mapSongs, /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        id: \"username\",\n        autoComplete: \"off\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        autoComplete: \"current-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Playlist, \"vuFfZUEl02TQ6t0InZNRr+Sc02U=\");\n\n_c = Playlist;\nexport default Playlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"sources":["/Users/jakefilut/Development/Final Projects/Sound_Swap/Sound_Swap/client/src/pages/Playlist.js"],"names":["React","useState","useEffect","Button","Error","Input","FormField","Label","Textarea","Playlist","songs","setSongs","updateSong","setUpdateSong","fetch","then","res","json","songData","console","log","handleDelete","song","id","method","headers","mapSongs","map","title","image","artist","duration","username","e","setUsername","target","value","password","setPassword"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,WAAjE;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAAC,QAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,QAAD,IAAcP,QAAQ,CAACO,QAAD,CAF9B;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GALQ,EAKN,CAACR,UAAD,CALM,CAAT;;AAOA,WAASS,YAAT,CAAsBC,IAAtB,EAA4B;AAC1BR,IAAAA,KAAK,CAAE,UAASQ,IAAI,CAACC,EAAG,EAAnB,EAAsB;AACzBC,MAAAA,MAAM,EAAE,QADiB;AAEzBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFgB,KAAtB,CAAL;AAMAN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAP,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD;;AAED,QAAMc,QAAQ,GAAGhB,KAAK,CAACiB,GAAN,CAAWL,IAAD,IAAU;AACnC,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBAA4BA,IAAI,CAACM;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,GAAG,EAAEN,IAAI,CAACO;AAAf;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAMP,IAAI,CAACQ;AAAX;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAMR,IAAI,CAACS;AAAX;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,OAAO,EAAE,MAAMV,YAAY,CAACC,IAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVgB,CAAjB;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACGI,QADH,eAEE,QAAC,SAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,KAAK,EAAEM,QAJT;AAKE,QAAA,QAAQ,EAAGC,CAAD,IAAOC,WAAW,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAYE,QAAC,SAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,KAAK,EAAEC,QAHT;AAIE,QAAA,QAAQ,EAAGJ,CAAD,IAAOK,WAAW,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAJ9B;AAKE,QAAA,YAAY,EAAC;AALf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA5DQ3B,Q;;KAAAA,Q;AA8DT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Error, Input, FormField, Label, Textarea } from \"../styles\";\n\nfunction Playlist() {\n  const [songs, setSongs] = useState([]);\n  const [updateSong, setUpdateSong] = useState(false);\n\n  useEffect(() => {\n    fetch(\"/songs\")\n      .then((res) => res.json())\n      .then((songData) => setSongs(songData));\n    console.log(\"updated song\");\n  }, [updateSong]);\n\n  function handleDelete(song) {\n    fetch(`/songs/${song.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    console.log(\"delete song\");\n    setUpdateSong(!updateSong);\n  }\n\n  const mapSongs = songs.map((song) => {\n    return (\n      <div className=\"song_container_card\">\n        <h1 className=\"song_title\">{song.title}</h1>\n        <img src={song.image} />\n        <div>{song.artist}</div>\n        <div>{song.duration}</div>\n        <button onClick={() => handleDelete(song)}>Remove From Playlist</button>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"song_container\">\n      {mapSongs}\n      <FormField>\n        <Label htmlFor=\"username\">Username</Label>\n        <Input\n          type=\"text\"\n          id=\"username\"\n          autoComplete=\"off\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </FormField>\n      <FormField>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          autoComplete=\"current-password\"\n        />\n      </FormField>\n      <button>Create Playlist</button>\n    </div>\n  );\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}