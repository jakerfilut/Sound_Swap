{"ast":null,"code":"var _jsxFileName = \"/Users/jakefilut/Development/Final Projects/Sound_Swap/Sound_Swap/client/src/pages/SongCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./SongCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SongCard({\n  results\n}) {\n  _s();\n\n  const [newSong, setNewSong] = useState({});\n  const [updateSong, setUpdateSong] = useState(false);\n\n  const convertHMS = value => {\n    const sec = parseInt(value, 10); // convert value to number if it's string\n\n    let hours = Math.floor(sec / 3600); // get hours\n\n    let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n\n    let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n    // add 0 if value < 10; Example: 2 => 02\n\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    } // console.log(hours + \":\" + minutes + \":\" + seconds);\n\n\n    return minutes + \":\" + seconds; // Return is HH : MM : SS\n  };\n\n  function handleClick(song) {\n    setNewSong({\n      title: song.title,\n      artist: song.artist.name,\n      duration: song.duration,\n      image: song.album.cover_medium\n    });\n    setUpdateSong(!updateSong);\n  }\n\n  useEffect(() => {\n    fetch(\"/songs\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSong)\n    });\n    console.log(newSong);\n  }, [updateSong]);\n  const mapResults = results.map(song => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song_container_card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"song_title\",\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.album.cover_medium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: song.artist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: convertHMS(song.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick(song),\n        children: \"Add to Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song_container\",\n    children: mapResults\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SongCard, \"lxZQrVvucw35RB2W+dKQ7nfZ5Y0=\");\n\n_c = SongCard;\nexport default SongCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongCard\");","map":{"version":3,"sources":["/Users/jakefilut/Development/Final Projects/Sound_Swap/Sound_Swap/client/src/pages/SongCard.js"],"names":["React","useState","useEffect","SongCard","results","newSong","setNewSong","updateSong","setUpdateSong","convertHMS","value","sec","parseInt","hours","Math","floor","minutes","seconds","handleClick","song","title","artist","name","duration","image","album","cover_medium","fetch","method","headers","body","JSON","stringify","console","log","mapResults","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./SongCard.css\";\n\nfunction SongCard({ results }) {\n  const [newSong, setNewSong] = useState({});\n  const [updateSong, setUpdateSong] = useState(false);\n\n  const convertHMS = (value) => {\n    const sec = parseInt(value, 10); // convert value to number if it's string\n    let hours = Math.floor(sec / 3600); // get hours\n    let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n    let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n    // add 0 if value < 10; Example: 2 => 02\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n    // console.log(hours + \":\" + minutes + \":\" + seconds);\n    return minutes + \":\" + seconds; // Return is HH : MM : SS\n  };\n\n  function handleClick(song) {\n    setNewSong({\n      title: song.title,\n      artist: song.artist.name,\n      duration: song.duration,\n      image: song.album.cover_medium,\n    });\n    setUpdateSong(!updateSong);\n  }\n\n  useEffect(() => {\n    fetch(\"/songs\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newSong),\n    });\n    console.log(newSong);\n  }, [updateSong]);\n\n  const mapResults = results.map((song) => {\n    return (\n      <div className=\"song_container_card\">\n        <h1 className=\"song_title\">{song.title}</h1>\n        <img src={song.album.cover_medium} />\n        <div>{song.artist.name}</div>\n        <div>{convertHMS(song.duration)}</div>\n        <button onClick={() => handleClick(song)}>Add to Playlist</button>\n      </div>\n    );\n  });\n\n  return <div className=\"song_container\">{mapResults}</div>;\n}\n\nexport default SongCard;\n"]},"metadata":{},"sourceType":"module"}